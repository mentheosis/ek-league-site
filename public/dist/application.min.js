"use strict";var ApplicationConfiguration=function(){var applicationModuleName="ekleague",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils","luegg.directives"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("bfh")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles",["ngAnimate"]),ApplicationConfiguration.registerModule("competitions"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("scrim-finder"),ApplicationConfiguration.registerModule("teams"),ApplicationConfiguration.registerModule("users"),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("msgboard",{url:"/msgboard",templateUrl:"modules/articles/views/msgboard.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$rootScope","$stateParams","$location","$animate","$timeout","Authentication","Articles","Comments",function($scope,$rootScope,$stateParams,$location,$animate,$timeout,Authentication,Articles,Comments){$scope.authentication=Authentication,$scope.switchShowFull=function(repeatScope){repeatScope.showFull=!repeatScope.showFull},$scope.createVisible=!1,$scope.switchCreateVisible=function(){$scope.createVisible=!$scope.createVisible},$scope.canEdit=function(post){return $rootScope.adminMode||post.user._id===Authentication.user._id},$scope.create=function(parentString){var article=new Articles({title:this.title,content:this.content,link:this.link});article.parent=parentString,article.user=this.user,article.imageurl=this.imageurl,article.$save(function(){$scope.title="",$scope.content="",$scope.imageurl="",article.user=Authentication.user,$scope.articles.unshift(article),$scope.createVisible=!$scope.createVisible},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createComment=function(){var article=new Articles({content:this.content});article.title="comment",article.parent=$scope.article._id,article.$save(function(){$scope.content="",article.user=Authentication.user,$scope.comments.unshift(article),$scope.showComment=!$scope.showComment},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if($scope.confirmDelete=!1,article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.sortBy="created",$scope.sortDesc=!0,$scope.sortAndUpdate=function(sorter){"reverse"===sorter?$scope.sortDesc=!$scope.sortDesc:$scope.sortBy=sorter,$scope.find()},$scope.dateDiffInDays=function(a,b){var _MS_PER_DAY=864e5,utc1=Date.UTC(a.getFullYear(),a.getMonth(),a.getDate()),utc2=Date.UTC(b.getFullYear(),b.getMonth(),b.getDate());return(utc2-utc1)/_MS_PER_DAY},$scope.find=function(){$scope.articles=Articles.list({parent:"top",limit:4,sortBy:($scope.sortDesc?"-":"")+$scope.sortBy})},$scope.listMsgs=function(){$scope.articles=Articles.list({parent:"msg",limit:25,sortBy:($scope.sortDesc?"-":"")+$scope.sortBy})},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId}),$scope.comments=Comments.query({parentId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"},kismet:{method:"POST",params:{jsonrpc:"2.0",method:"send_kismet",params:{amt:1},id:Date.now}},list:{method:"GET",isArray:!0,params:{sortBy:"@sortBy"}}})}]),angular.module("articles").factory("Comments",["$resource",function($resource){return $resource("comments/:parentId",{parentId:"@parent"})}]),angular.module("competitions").config(["$stateProvider",function($stateProvider){$stateProvider.state("competitions",{url:"/competitions",templateUrl:"modules/competitions/views/competitions.client.view.html"}),$stateProvider.state("manage-comps",{url:"/manage-comps",templateUrl:"modules/competitions/views/manage-comps.client.view.html"}),$stateProvider.state("comp-detail",{url:"/competitions/:compId",templateUrl:"modules/competitions/views/comp-detail.client.view.html"})}]),angular.module("competitions").controller("CompController",["$scope","$stateParams","Authentication","Users","Competitions","Rankings","Teams","Matchups",function($scope,$stateParams,Authentication,Users,Competitions,Rankings,Teams,Matchups){$scope.authentication=Authentication,$scope.hideJoinButton=!1,$scope.setHideJoinButton=function(){for(var r in $scope.rankings)$scope.rankings[r].team&&$scope.rankings[r].team._id===Authentication.user.team&&($scope.hideJoinButton=!0)},$scope.joinText="Joining competition...",$scope.tryJoinCompetition=function(){$scope.showJoinModal=!0;var userFromDb=Users.get({userId:Authentication.user._id},function(){userFromDb.team?userFromDb._id===userFromDb.team.founder||-1!==userFromDb.team.captains.indexOf(userFromDb.username)?userFromDb.team.members.length<5?$scope.joinText="You must have at least 5 members on your roster to register.":($scope.joinText=userFromDb.team.name+" registered!",$scope.addTeamToComp(userFromDb.team._id,$scope.selectedComp)):$scope.joinText="You must be a captain to register your team.":$scope.joinText="You must be a team captain to join this competiton."})},$scope.createComp=function(){var comp=new Competitions({name:this.compName,bannerurl:this.compBanner,description:this.compDesc});comp.$save(function(){$scope.compName="",$scope.compBanner="",$scope.compDesc="",$scope.listComps()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.gatherCompData=function(compId){$scope.comp=void 0,$scope.selectedComp=compId?compId:$stateParams.compId,$scope.getComp(),$scope.listRankings(),$scope.listMatchups()},$scope.listComps=function(){$scope.competitions=Competitions.query(),$scope.listTeams()},$scope.getComp=function(){$scope.comp=Competitions.get({compId:$scope.selectedComp})},$scope.saveComp=function(){$scope.comp&&$scope.comp.$save({},function(){$scope.listComps()})},$scope.listTeams=function(){$scope.teams=Teams.list({sortBy:"lowername"})},$scope.listRankings=function(){$scope.rankings=Rankings.list({compId:$scope.selectedComp,sortBy:"wins"},function(){$scope.setHideJoinButton()})},$scope.addTeamToComp=function(teamId,compId){if(teamId&&compId){var team=new Rankings({competition:compId,team:teamId});team.$save(function(){$scope.success="Team Added",$scope.listRankings()},function(errorResponse){$scope.error=errorResponse.data.message})}},$scope.removeTeam=function(team){team.$remove({rankId:team._id},function(){$scope.sucess="Team Removed",$scope.listRankings()},function(error){$scope.error=error.data.message})},$scope.listMatchups=function(){$scope.matchups=Matchups.list({compId:$scope.selectedComp})},$scope.generateMatchups=function(){var matchup=new Matchups({});return $scope.comp?void matchup.$generate({compId:$scope.comp._id},function(){$scope.listMatchups()},function(err){$scope.error=err}):$scope.error="Select a Competition First"},$scope.delete=function(comp){$scope.confirmDelete=!1,comp&&comp.$remove(function(){for(var i in $scope.competitions)$scope.competitions[i]._id===$scope.comp._id&&$scope.competitions.splice(i,1);$scope.comp=null,$scope.rankings=null})}}]),angular.module("competitions").factory("Competitions",["$resource",function($resource){return $resource("competitions/:compId",{compId:"@_id"})}]),angular.module("competitions").factory("Matchups",["$resource",function($resource){return $resource("matchups/:compId",{matchupId:"@_id"},{generate:{method:"POST"},list:{method:"GET",isArray:!0,params:{compId:"@compId"}}})}]),angular.module("competitions").factory("Rankings",["$resource",function($resource){return $resource("rankings/:compId",{rankId:"@_id"},{list:{method:"GET",isArray:!0,params:{sortBy:"@sortBy"}}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/articles/views/list-articles.client.view.html"}),$stateProvider.state("about",{url:"/about",templateUrl:"modules/core/views/about.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","$sce","$rootScope","$location","$timeout","Authentication","Users","Settings","Menus",function($scope,$sce,$rootScope,$location,$timeout,Authentication,Users,Settings,Menus){function dateDiff(now,later){var diffMs=later-now,secMs=1e3,minMs=60*secMs,hourMs=60*minMs,dayMs=24*hourMs,diffDays=Math.floor(diffMs/dayMs),diffHours=Math.floor(diffMs%dayMs/hourMs),diffMins=Math.floor(diffMs%hourMs/minMs),diffSec=Math.floor(diffMs%minMs/secMs);return{day:diffDays.toString(),hour:diffHours.toString(),min:diffMins.toString(),sec:diffSec.toString()}}$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.goToMyTeam=function(){var userFromDb=Users.get({userId:Authentication.user._id},function(){$location.url(userFromDb.team&&""!==userFromDb.team._id?"/teams/"+userFromDb.team._id:"/teams")})},$scope.targetDate=new Date(2015,2,15,0),$scope.now=new Date,$scope.showCountdownLogin=!1,$scope.counter=dateDiff($scope.now,$scope.targetDate),$scope.onTimeout=function(){$scope.now=new Date,$scope.counter=dateDiff($scope.now,$scope.targetDate),mytimeout=$timeout($scope.onTimeout,1e3)};var mytimeout=$timeout($scope.onTimeout,1e3);$rootScope.adminMode=!1,$scope.switchAdminMode=function(){$rootScope.adminMode=!$rootScope.adminMode},$scope.editBanner=!1,$scope.switchEditBanner=function(){$scope.editBanner=!$scope.editBanner,$scope.newBanner&&""!==$scope.newBanner&&(Settings.update({settingName:"bannerScroll",settingValue:$scope.newBanner}),$scope.bannerHtml=$sce.trustAsHtml('<marquee class="top-scroll" behavior="scroll" direction="left">'+$scope.newBanner+"</marquee>"),$scope.newBanner="")},$scope.getBanner=function(){Settings.get({settingName:"bannerScroll"},function(response){$scope.bannerHtml=$sce.trustAsHtml('<marquee class="top-scroll" behavior="scroll" direction="left">'+response.value+"</marquee>")})},$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","Settings",function($scope,Authentication,Settings){$scope.authentication=Authentication,$scope.saveNewSetting=function(){$scope.resText="";var newsetting=new Settings({category:"about",name:this.newName,value:this.newValue});console.log(newsetting),newsetting.$save(function(res){$scope.newName="",$scope.newValue="",$scope.aboutItems.push(res),$scope.resText="Saved"})},$scope.aboutItems=[],$scope.getAboutItems=function(){$scope.aboutItems=Settings.query({category:"about"})},$scope.updateSettingWrap=function(setting,innerScope){innerScope.editingItem=!1,$scope.updateSetting(setting)},$scope.updateSetting=function(setting){setting.$update()},$scope.deleteSetting=function(setting){setting.$remove();for(var i in $scope.aboutItems)$scope.aboutItems[i]===setting&&$scope.aboutItems.splice(i,1)}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("Settings",["$resource",function($resource){return $resource("settings/:settingId",{settingId:"@_id"},{update:{method:"PUT",params:{settingName:"@settingName",settingValue:"@settingValue"}}})}]),angular.module("scrim-finder").config(["$stateProvider","$urlRouterProvider",function($stateProvider){$stateProvider.state("scrim",{url:"/scrim",templateUrl:"modules/scrim-finder/views/scrim.client.view.html"})}]),angular.module("scrim-finder").controller("ScrimController",["$scope","$rootScope","Authentication","Scrims","SocketIO","Teams",function($scope,$rootScope,Authentication,Scrims,SocketIO){$scope.authentication=Authentication,$scope.chatMessages=[],$scope.createVisible=!1,$scope.switchCreateVisible=function(){$scope.createVisible=!$scope.createVisible},$scope.createScrim=function(){var image;image=Authentication.user.avatar?Authentication.user.avatar:"/modules/core/img/default-avatar.png";var scrim=new Scrims({map:this.map,format:this.format,notes:this.notes,time:this.time,imageurl:image,team:Authentication.user.username});scrim.$save(function(){$scope.switchCreateVisible(),$scope.map="",$scope.format="",$scope.notes="",$scope.time=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.sendChat=function(msg){""!==msg&&(SocketIO.emit("scrim-chat",{user:Authentication.user.username,message:msg}),$scope.chatMsg="")},$scope.isScrimCreator=function(scrim){return scrim.team===Authentication.user.username},$scope.canSeePrivateChat=function(scrim){return scrim.team===Authentication.user.username&&""!==scrim.acceptedUser||scrim.acceptedUser===Authentication.user.username},$scope.hasReplies=function(scrim){return $scope.isScrimCreator(scrim)&&scrim.replies.length>=1},$scope.replied=function(scrim){return!$scope.isScrimCreator(scrim)&&-1!==scrim.replies.indexOf(Authentication.user.username)},$scope.scrimFinalized=function(scrim){return scrim.acceptedUser&&""!==scrim.acceptedUser},$scope.replyToScrim=function(scrimId){SocketIO.emit("scrim reply",{scrim:scrimId,user:Authentication.user.username})},$scope.acceptReply=function(scrimId,acceptedUser){SocketIO.emit("scrim accept",{scrim:scrimId,user:acceptedUser})},$scope.saveHomeInfo=function(scrim){SocketIO.emit("home info",{scrim:scrim._id,home:scrim.homeInfo})},$scope.saveAwayInfo=function(scrim){SocketIO.emit("away info",{scrim:scrim._id,away:scrim.awayInfo})},$scope.orderScrims=function(scrim){return $scope.canSeePrivateChat(scrim)?0:$scope.replied(scrim)||$scope.hasReplies(scrim)?1:scrim.acceptedUser&&""!==scrim.acceptedUser?99:55},$scope.initialize=function(){SocketIO.emit("initialize chat",{user:Authentication.user.username}),$scope.scrims=Scrims.query()},$scope.$on("$destroy",function(){clearChatListener&&clearChatListener(),clearInitlistener&&clearInitlistener(),clearUserListener&&clearUserListener(),clearAddListener&&clearAddListener(),clearUpdateListener&&clearUpdateListener(),SocketIO.emit("exiting chat",{user:Authentication.user.username})});var clearUpdateListener=(SocketIO.on("home info updated",function(req){for(var s=0;s<$scope.scrims.length;s++)if($scope.scrims[s]._id===req.scrim)return void($scope.scrims[s].homeInfo=req.home)}),SocketIO.on("away info updated",function(req){for(var s=0;s<$scope.scrims.length;s++)if($scope.scrims[s]._id===req.scrim)return void($scope.scrims[s].awayInfo=req.away)}),SocketIO.on("scrim updated",function(scrim){for(var s=0;s<$scope.scrims.length;s++)if($scope.scrims[s]._id===scrim._id)return void $scope.scrims.splice(s,1,scrim)})),clearAddListener=SocketIO.on("scrim added",function(scrim){$scope.scrims.unshift(scrim)}),clearChatListener=SocketIO.on("chat message",function(msg){$scope.chatMessages.push(msg)}),clearInitlistener=SocketIO.on("initialize chat",function(res){$scope.chatMessages=res});$scope.userList=[];var clearUserListener=SocketIO.on("update userlist",function(userlist){console.log("got userlist"),console.log(JSON.stringify(userlist)),$scope.userList=userlist})}]),angular.module("scrim-finder").factory("Scrims",["$resource",function($resource){return $resource("scrims/:postId",{postId:"@_id"})}]),angular.module("scrim-finder").factory("SocketIO",["$rootScope",function($rootScope){var socket=io();return{on:function(eventName,callback){function wrapper(){var args=arguments;$rootScope.$apply(function(){callback.apply(socket,args)})}return socket.on(eventName,wrapper),function(){socket.removeListener(eventName,wrapper)}},emit:function(eventName,data,callback){socket.emit(eventName,data,function(){var args=arguments;$rootScope.$apply(function(){callback&&callback.apply(socket,args)})})}}}]),angular.module("teams").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTeams",{url:"/teams",templateUrl:"modules/teams/views/grid-teams.client.view.html"}),$stateProvider.state("createTeam",{url:"/teams/create",templateUrl:"modules/teams/views/create-team.client.view.html"}),$stateProvider.state("viewTeam",{url:"/teams/:teamId",templateUrl:"modules/teams/views/team-bio.client.view.html"}),$stateProvider.state("editTeam",{url:"/teams/:teamId/edit",templateUrl:"modules/teams/views/edit-team.client.view.html"})}]),Array.prototype.indexOfUsername=function(username){for(var i=0;i<this.length;i++)if(this[i].username===username)return i;return-1},angular.module("teams").controller("TeamsController",["$scope","$rootScope","$stateParams","$location","$animate","$timeout","Authentication","Settings","Teams",function($scope,$rootScope,$stateParams,$location,$animate,$timeout,Authentication,Settings,Teams){$scope.authentication=Authentication,$scope.indexOfUsername=function(id){return this.indexOfUsername(id)},$scope.canEditStuff=function(){return $scope.team&&Authentication.user&&(Authentication.user._id===$scope.team.founder||$rootScope.adminMode||$scope.team.captains&&-1!==$scope.team.captains.indexOf(Authentication.user.username))},$scope.saveTeamImg=function(){$scope.team.$update(function(){$scope.showEditImage=!1})},$scope.teamProfileItems=[],$scope.getTeamProfileItems=function(){Settings.get({settingName:"teamProfile"},function(response){response&&response.value&&($scope.teamProfileItems=response.value),buildTeamProfileAnswers()})},$scope.saveTeamProfileItems=function(){$scope.teamProfileItems&&(console.log("saving: "+$scope.teamProfileItems),Settings.update({settingName:"teamProfile",settingValue:$scope.teamProfileItems}))};var buildTeamProfileAnswers=function(){console.log("building answers");for(var teamProfileAnswers=[],i=0;i<$scope.teamProfileItems.length;i++)if(teamProfileAnswers.push({key:$scope.teamProfileItems[i],answer:""}),$scope.team&&$scope.team.profileAnswers)for(var j=0;j<$scope.team.profileAnswers.length;j++)$scope.team.profileAnswers[j].key===$scope.teamProfileItems[i]&&(teamProfileAnswers[i].answer=$scope.team.profileAnswers[j].answer);$scope.teamProfileAnswers=teamProfileAnswers};$scope.saveTeamProfileAnswers=function(innerScope){$scope.team.profileAnswers=$scope.teamProfileAnswers,$scope.team.$update(),innerScope.editingAnswers=!1},$scope.joinpassword="",$scope.joinTeam=function(){$scope.errText="",Authentication.user&&$scope.team&&-1===$scope.team.members.indexOfUsername(Authentication.user.username)&&($scope.team.password=$scope.joinpassword,$scope.team.$save({newMember:Authentication.user._id},function(team){$scope.team=team,$scope.tryJoinTeam=!1,$scope.joinpassword=""},function(err){$scope.errText=err.data.message,$scope.joinpassword=""}))},$scope.quitTeam=function(){Authentication.user&&$scope.team&&-1!==$scope.team.members.indexOfUsername(Authentication.user.username)&&($scope.demote(Authentication.user.username),$scope.team.$save({removeMember:Authentication.user._id},function(team){$scope.team=team}))},$scope.kickMember=function(member){$scope.demote(member.username),$scope.team.$save({removeMember:member._id},function(team){$scope.team=team})},$scope.editBio=!1,$scope.processBio=function(){$scope.editBio&&$scope.team.$update(),$scope.editBio=!$scope.editBio},$scope.create=function(){var team=new Teams({name:this.name});team.imageurl=this.imageurl,team.joinpw=this.joinpw,team.$save(function(response){$location.path("teams/"+response._id),$scope.name="",$scope.description="",$scope.imageurl="",$scope.teams.unshift(team),$scope.hideCreateForm()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.updatePassword=function(){$scope.team.joinpw=$scope.joinpassword,$scope.team.$update(function(){$scope.changingPassword=!1},function(err){$scope.error=err.data.message})},$scope.delete=function(team){if($scope.confirmDelete=!1,team){team.$remove();for(var i in $scope.teams)$scope.teams[i]===team&&$scope.teams.splice(i,1)}else $scope.team.$remove(function(){$location.path("teams")})},$scope.promote=function(username){-1===$scope.team.captains.indexOf(username)&&($scope.team.captains.push(username),$scope.team.$update())},$scope.demote=function(username){var index=$scope.team.captains.indexOf(username);-1!==index&&($scope.team.captains.splice(index,1),$scope.team.$update())},$scope.isCaptain=function(username){return-1!==$scope.team.captains.indexOf(username)?!0:!1},$scope.update=function(){var team=$scope.team;team.$update(function(){$location.path("teams/"+team._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.sortBy="created",$scope.sortDesc=!0,$scope.find=function(){$scope.teams=Teams.list({sortBy:($scope.sortDesc?"-":"")+$scope.sortBy})},$scope.findOne=function(){$scope.team=Teams.get({teamId:$stateParams.teamId},function(){$scope.getTeamProfileItems()})}}]),angular.module("teams").factory("Teams",["$resource",function($resource){return $resource("teams/:teamId",{teamId:"@_id"},{update:{method:"PUT"},list:{method:"GET",isArray:!0,params:{sortBy:"@sortBy"}}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$scope.clicked="processing request",$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users/:userId",{},{update:{method:"PUT"}})}]);